# pylint: disable=missing-module-docstring,disable=missing-class-docstring,missing-function-docstring,line-too-long
from comfy.comfy_types import IO
from server import PromptServer
from .tools import Resolution, get_flux_closest_valid_resolution

HIRES_RATIO = 2


class FluxResolution():
    CATEGORY = "flux tools"
    RETURN_TYPES = (
        IO.INT, IO.INT,
        IO.INT, IO.INT,
        IO.BOOLEAN,
        IO.BOOLEAN,
    )
    RETURN_NAMES = (
        "reference_width", "reference_height",
        "generate_width", "generate_height",
        "need_hires",
        "need_final_upscale",
    )
    FUNCTION = "run"
    DESCRIPTION = """Get the closest compatible flux resolution from a given resolution."""

    @classmethod
    def INPUT_TYPES(cls):
        # pylint: disable=invalid-name
        return {
            "required": {
                "width": (IO.INT,),
                "height": (IO.INT,),
            },
            "hidden": {
                "unique_id": "UNIQUE_ID",
            }
        }

    def __init__(self):
        pass

    def run(self, width, height, unique_id=None) -> tuple[int, int, int, int, bool, bool]:
        # Compute the flux first pass generation resolution
        # and the adjusted (if necessary) reference resolution.
        
        # Adjusted resolution is the resolution the closest to the input while respecting the stepping
        # if this is not the case for input (min size and max size and not yet taken into account).
        # It can be used as a final target to avoid deforming the image generated by flux.

        flux_reso, adjusted_ref_reso = get_flux_closest_valid_resolution(
            Resolution(width, height)
        )

        # Compute if a HiRes fix x2 second pass is needed to get to the reference resolution
        need_hires = False
        need_upscale = False
        if flux_reso.width < adjusted_ref_reso.width or flux_reso.height < adjusted_ref_reso.height:
            need_hires = True
            hires = Resolution(
                width=flux_reso.width * HIRES_RATIO,
                height=flux_reso.height * HIRES_RATIO
            )
            if hires.width < adjusted_ref_reso.width or hires.height < adjusted_ref_reso.height:
                need_upscale = True

        # send debug info to front
        if unique_id:
            # TODO
            PromptServer.instance.send_progress_text("todo", unique_id)

        # Return to the user everything he needs for next steps
        return adjusted_ref_reso.width, adjusted_ref_reso.height, flux_reso.width, flux_reso.height, need_hires, need_upscale
